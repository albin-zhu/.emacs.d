#+title: albin's emacs configure
#+author: albin<albinyewen@gmail.com>

* Set elpa for China
最好换成清华大学的 elpa 那个相对比较快一点.
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                           ("melpa" . "http://elpa.emacs-china.org/melpa/")))
  (package-initialize) ;; You might already have this line

  (when (not package-archive-contents)
      (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+END_SRC

#+RESULTS:
: t

* Default Settings  
** truncate-lines
#+begin_src emacs-lisp
  (toggle-truncate-lines -1)
#+end_src

#+RESULTS:
: Truncate long lines disabled

** tab
#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 4)
  (setq-default indent-tabs-mode nil)
  ;; (global-linum-mode t)

#+END_SRC

#+RESULTS:

** change-key-for-osx
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'hyper)
  (global-set-key (kbd "H-z") 'undo)
  (global-set-key (kbd "H-y") 'undo-tree-redo)
  (global-set-key (kbd "H-<return>") 'toggle-frame-fullscreen)
  (global-set-key (kbd "C-H-<return>") 'toggle-frame-maximized)
  (global-set-key (kbd "H-k") 'kill-this-buffer)
  (global-set-key (kbd "H-i") `(lambda () (interactive) (find-file, "~/.emacs.d/settings.org")))
  (global-set-key (kbd "H-q") 'kill-emacs)
  (global-set-key (kbd "H-c") 'kill-ring-save)
  (global-set-key (kbd "H-v") 'yank)
#+END_SRC

#+RESULTS:
: yank

** yesorno
这个不用多想了吧
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** GUI
去掉一些没用的 tool-bar,scroll-bar
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     ;;(menu-bar-mode -1)

     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; assuming you are using a dark theme
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
     (setq ns-use-proxy-icon nil)
     (setq frame-title-format nil)
   #+END_SRC

   #+RESULTS:

** window-numbering
这个已经习惯了，meat+123 去切换了。
   #+BEGIN_SRC emacs-lisp
     (use-package window-numbering
       :init
       (window-numbering-mode t))
   #+END_SRC

** exec-path-from-shell
brew很好用,但它的安装路径,只会体现在shell variables里,我这里需要把shell path读到emacs的exec-path里,这样我的emacs里用的东西才可能是我想要的.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
#+END_SRC
** undo-tree
这个其实最好不要用,如果需要大规模的撤销,说明没想好写什么,尽量还是用上边的Command-z,Command-y
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode t)
    )
#+END_SRC
** multiple-cursors
我非常喜欢sublime里的多行模式,以及标记相同单词,这里必须加进来.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind (
           ("H-l" . mc/edit-lines)
           ("H-d" . mc/mark-next-like-this)
           ("C-M-H-d" . mc/mark-all-like-this)))
#+END_SRC

** ivy
  #+BEGIN_SRC emacs-lisp
    (use-package smex)
    (use-package counsel)
    (use-package ivy-rich)
    (use-package ivy-hydra)
    (use-package ivy
      :init
      (ivy-mode t)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-s") 'swiper)
      (global-set-key (kbd "H-p") 'switch-to-prev-buffer)
      (global-set-key (kbd "H-o") 'counsel-recentf)
      )
  #+END_SRC

  #+RESULTS:

*** TODO switch to recent buffer

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode t))
#+end_src

#+RESULTS:

** no lock and backup files
那些文件虽然对我很有用,但是对同项目组的其它人会造成困扰
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
#+end_src

#+RESULTS:
: t

** COMMENT 启动的时候就打开org agenda
#+begin_src emacs-lisp
  (org-agenda nil "n")
#+end_src

#+RESULTS:
| t | org-agenda-reset-markers |

** 光标移动
如果开发折行,移动光标的时候,是按文本的一行行来移动的,可能会有点耗.改成按屏幕的行数来移.
#+begin_src emacs-lisp
  (setq line-move-visual t)
#+end_src

* theme
主题这一块还是想抄成 doom，毕竟比较好看
** font
   #+BEGIN_SRC emacs-lisp
     (if (string= system-type "darwin")
         (set-frame-font "-*-Menlo-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
        (set-frame-font "-*-DejaVu Sans Mono-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
       )

   #+END_SRC

   #+RESULTS:

*** TODO 这个还差一个中英文混排的问题，尤其是在 org-mode table 里
** COMMENT doom-theme
  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :init
      (setq custom-safe-themes t) ;; 不需要弹出确定
      (load-theme 'doom-city-lights))
  #+END_SRC

  #+RESULTS:
** tao-theme
#+begin_src emacs-lisp
  (use-package tao-theme
    :init
    (setq custom-safe-themes t)
    (load-theme 'tao-yang))
#+end_src

#+RESULTS:

** doom-mode-line
这个还没有自定义，默认的已经足够我用的了
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :init
       (doom-modeline-mode t)
       )
   #+END_SRC
** transparent
装逼用的,不装也没事
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter nil 'alpha '(100 . 100))
  (defun more-transparency ()
    (interactive)
    (let* ((opacity (+ (car (frame-parameter nil 'alpha)) 10)))    
      (setq opacity (if (> opacity 100)
           100
         opacity))
      (set-frame-parameter nil 'alpha `(,opacity . 100))))

  (defun less-transparency ()
    (interactive)
    (let* ((opacity (- (car (frame-parameter nil 'alpha)) 10)))
      (setq opacity (if (< opacity 50)
           50
         opacity))
      (set-frame-parameter nil 'alpha `(,opacity . 100))))

  (global-set-key (kbd "<H-right>") 'more-transparency)
  (global-set-key (kbd "<H-left>") 'less-transparency)
#+END_SRC

#+RESULTS:
: less-transparency

* org-mode
** beautify
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode)
    )
#+END_SRC

** preview
现在只做一个 html 的预览就足够了，pdf 的那个太废时间了
#+BEGIN_SRC emacs-lisp
  (use-package org-preview-html)
  (use-package htmlize)
#+END_SRC

** org-capture-screen
#+begin_src emacs-lisp
  (defun my-org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (org-display-inline-images)
    (setq filename
          (concat
           (make-temp-name
            (concat (file-name-nondirectory (buffer-file-name))
                    "_imgs/"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
            ; take screenshot
    (if (eq system-type 'darwin)
        (progn
    (call-process-shell-command "screencapture" nil nil nil nil " -s " (concat
                        "\"" filename "\"" ))
    (call-process-shell-command "convert" nil nil nil nil (concat "\"" filename "\" -resize  \"50%\"" ) (concat "\"" filename "\"" ))
    ))
    (if (eq system-type 'gnu/linux)
        (call-process "import" nil nil nil filename))
            ; insert into file if correctly taken
    (if (file-exists-p filename)
        (insert (concat "[[file:" filename "]]")))
    (org-display-inline-images)
    )

  (global-set-key (kbd "C-c s c") 'my-org-screenshot)
#+end_src

#+RESULTS:
: my-org-screenshot
** load-languages
#+begin_src emacs-lisp
    (custom-set-variables
     '(org-babel-load-languages
       (quote
        ((shell . t)
         (python . t)
         (emacs-lisp . t)
         (sql . t)
         (C . t)
         (js . t)))))
#+end_src

#+RESULTS:
** capture and agenda
#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("i" "inbox" entry (file "~/org/inbox.org")
           "* TODO %?")
          ("p" "paper" entry (file "~/org/papers/papers.org")
           "* TODO %(jethro/trim-citation-title \"%:title\")\n%a" :immediate-finish t)
          ("e" "email" entry (file+headline "~/org/emails.org" "Emails")
           "* TODO [#A] Reply: %a :@home:@school:" :immediate-finish t)
          ("l" "link" entry (file "~/org/inbox.org")
           "* TODO %(org-cliplink-capture)" :immediate-finish t)
          ("z" "elfeed-link" entry (file "~/org/inbox.org")
           "* TODO %a\n" :immediate-finish t)
          ("w" "Weekly Review" entry (file+olp+datetree "~/org/reviews.org")
           (file "~/org/templates/weekly_review.org"))
          ("s" "Snippet" entry (file "~/org/deft/capture.org")
           "* Snippet %<%Y-%m-%d %H:%M>\n%?")))
  (global-set-key (kbd "H-s") 'org-capture)
#+end_src

#+RESULTS:
| p | paper | entry | (file ~/org/papers/papers.org) | * TODO %(jethro/trim-citation-title "%:title") |

** no-confirm for org-babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:

** org-project
#+begin_src emacs-lisp
  (setq org-publish-project-alist
        '(
          ;; These are the main web files
          ("org-notes"
           :base-directory "~/orgs" ;; Change this to your local dir
           :base-extension "org"
           :publishing-directory "~/orgs"

           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :section-numbers nil
           :auto-preamble t
           :with-toc t

           :sitemap-file-entry-format "%d ====> %t"
           :sitemap-sort-files anti-chronologically
           :sitemap-filename "index.org"
           :sitemap-title "湖南久翼(研发)Wiki"
           :auto-sitemap t

           :html-doctype "html5"
           :html-validation-link nil
           :html-link-home "/index.html"
           :html-link-up "/index.html"

           :author "albin"
           :email "yabin_zhu@staff.9you.com"
           :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/org-mode.css\"/>"
           :language "zh-CN"


           ;; :recursive t
           ;; :publishing-function org-html-publish-to-html;org-html-export-to-html;org-publish-org-to-html
           ;; :headline-levels 4             ; Just the default for this project.
           ;; :auto-preamble nil
           ;; :inex-filename "index.org"
           ;; :index-title "湖南久翼(研发)Wiki"
           ;; ;; Layersmenu:
           ;; :completion-function sr-org-notes-sitemap-complete
           ;; :menu/structure-file "~/path/to/menu-structure-file.txt"
           ;; :menu/link-target "mitte" ;; optional
           ;; :section-numbers nil
           ;; :table-of-contents t
           ;; :html-head-extra "<link rel='stylesheet' type='text/css' href='/css/worg.css' />"
           ;; :style-include-default nil
           )

          ;; These are static files (images, pdf, etc)
          ("org-static"
           :base-directory "~/orgs" ;; Change this to your local dir
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|txt\\|asc"
           :publishing-directory "~/orgs"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ("org" :components ("org-notes" "org-static"))
          )
        )

  (defun publish-project (project no-cache)
    (interactive "sName of project: \nsNo-cache?[y/n] ")
    (if (or (string= no-cache "y")
            (string= no-cache "Y"))
        (setq org-publish-use-timestamps-flag nil))
    (org-publish-project project)
    (setq org-publish-use-timestamps-flag t))
#+end_src

#+RESULTS:
: publish-project

** COMMENT mysql-mode
#+begin_src emacs-lisp
  (require 'ob-shell)

  (defun org-babel-execute:mysql (body params)
    (let* ((session (org-babel-sh-initiate-session
                     (cdr (assq :session params))))
           (stdin (let ((stdin (cdr (assq :stdin params))))
                    (when stdin (org-babel-sh-var-to-string
                                 (org-babel-ref-resolve stdin)))))
           (cmdline (cdr (assq :cmdline params)))
           (full-body (org-babel-expand-body:generic
                       body params (org-babel-variable-assignments:shell params))))
      (org-babel-reassemble-table
       (org-babel-sh-evaluate session (concat cmdline " " full-body) params stdin "")
       (org-babel-pick-name
        (cdr (assq :colname-names params)) (cdr (assq :colnames params)))
       (org-babel-pick-name
        (cdr (assq :rowname-names params)) (cdr (assq :rownames params)))))
    )

#+end_src

** COMMENT emails
#+begin_src emacs-lisp
  (setq nnimap-sequence 1)
  (setq gnus-secondary-select-methods
        '(
          (nnimap "gmail"
                  (nnimap-address
                   "imap.gmail.com")
                  (nnimap-server-port 993)
                  (nnimap-stream ssl))
          ))

  (setq nnml-directory "~/staff_mail")
  (setq message-directory "~/staff_mail")
#+end_src

#+RESULTS:
: ~/staff_mail

** export to pdf
#+begin_src emacs-lisp
  (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
                                "xelatex -interaction nonstopmode %f"))
#+end_src

** keybinding
#+begin_src emacs-lisp
  (global-set-key (kbd "H-a") 'org-agenda)
#+end_src

** indent mode and 8.x
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (if (string= system-type "darwin")
      (require 'org-tempo))
#+END_SRC

#+RESULTS:


* 基础补全
** company/lsp
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (global-company-mode t)
    (global-auto-composition-mode)
    :bind (
           ("H-?" . lsp-describe-thing-at-point)
           ("H-." . lsp-find-definition)
           ))
  (use-package company-lsp
    :after compnay
    :init
    (push 'company-lsp compyany-backends))
#+END_SRC

#+RESULTS:
: lsp-find-definition

#+END_SRC
*** COMMENT python
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook `(lambda () (lsp)))
#+END_SRC

#+RESULTS:
| (lambda nil (lsp)) | paredit-mode | doom-modeline-env-setup-python |


** COMMENT ycmd
lsp最近好像不太好用,还是改用ycmd
*** 基础环境
- python3
  #+begin_src sh
    brew install python
  #+end_src

** 括号
*** 高亮匹配
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-parentheses
         :init
         (global-highlight-parentheses-mode t)
         )
   #+END_SRC

   #+RESULTS:

*** COMMENT 补全
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :hook
       (c-mode-common             . paredit-mode)
       (c-mode                    . paredit-mode)
       (c++-mode                  . paredit-mode)
       (java-mode                 . paredit-mode)
       (haskell-mode              . paredit-mode)
       (emacs-lisp-mode           . paredit-mode)
       (lisp-interaction-mode     . paredit-mode)
       (lisp-mode                 . paredit-mode)
       (maxima-mode               . paredit-mode)
       (ielm-mode                 . paredit-mode)
       (sh-mode                   . paredit-mode)
       (makefile-gmake-mode       . paredit-mode)
       (php-mode                  . paredit-mode)
       (python-mode               . paredit-mode)
       (js-mode                   . paredit-mode)
       (go-mode                   . paredit-mode)
       (qml-mode                  . paredit-mode)
       (jade-mode                 . paredit-mode)
       (css-mode                  . paredit-mode)
       (ruby-mode                 . paredit-mode)
       (coffee-mode               . paredit-mode)
       (rust-mode                 . paredit-mode)
       (qmake-mode                . paredit-mode)
       (lua-mode                  . paredit-mode)
       (swift-mode                . paredit-mode)
       ;(minibuffer-inactive-mode  . paredit-mode)
       )    
   #+END_SRC

* applications
** DONE git
magit最好用的,没有之一
#+BEGIN_SRC emacs-lisp
    ;; todo: add bind
    (use-package magit
      :bind
      (("H-g s" . magit-status)))
    (use-package magit-gitflow)
    (use-package magit-org-todos)
#+END_SRC

#+RESULTS:
** 输入法
*** 拼音
#+begin_src emacs-lisp
  (use-package pyim
    :ensure nil
    :demand t
    :config
    ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
    (use-package pyim-wbdict
      :ensure nil
      :config (pyim-wbdict-v98-enable))

    (setq default-input-method "pyim")
    (setq pyim-default-scheme 'wubi)
    ;; 我使用全拼

    (setq pyim-page-tooltip 'popup)

    ;; 选词框显示5个候选词
    (setq pyim-page-length 5)
    )
#+end_src

#+RESULTS:
: t

** docker
#+begin_src emacs-lisp
  (use-package docker)
  (use-package yaml-mode)
  (use-package docker-compose-mode)
#+end_src

** youdao
#+begin_src emacs-lisp
    (use-package youdao-dictionary
      :bind (
             ("H-r" . youdao-dictionary-search-at-point+)
             ;;("C-H-<SPC>" . youdao-dictionary-search-and-replace)
             ))

#+end_src

#+RESULTS:
: youdao-dictionary-search-at-point+

** treemacs
#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

#+RESULTS:

** shell
#+begin_src emacs-lisp
  (defun my-buffer-face-mode-fixed ()
     (interactive)
     (setq buffer-face-mode-face '(:family "DejaVu Sans Mono for Powerline"))
     (buffer-face-mode))

  (use-package multi-term
    :init
    (setq multi-term-program "/bin/zsh")
    :hook
    (shell-mode my-buffer-face-mode-fixed)
    :bind
    (
     ("C-H-<left>" . multi-term-prev)
     ("C-H-<right>" . multi-term-next)))
#+end_src

#+RESULTS:
| multi-term |

** COMMENT omnisharp
#+begin_src emacs-lisp
  (use-package omnisharp
    :hook (csharp-mode-hook . omnisharp-mode))
#+end_src

** wakatime
#+BEGIN_SRC emacs-lisp 
  (use-package wakatime-mode
    :init
    (setq wakatime-api-key "26272c47-ba04-404b-89fb-493227361e26"
          global-wakatime-mode t
          wakatime-cli-path "/usr/local/bin/wakatime"
          wakatime-python-bin "python")
    )
#+END_SRC

#+RESULTS:

** protobuf
#+begin_src emacs-lisp
  (use-package protobuf-mode)
#+end_src

#+RESULTS:

* 启动页
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    :init
    ;;(setq dashboard-banner-logo-title "要么黑要么白")
    (setq dashboard-startup-banner "~/.emacs.d/logo.png")
    (setq dashboard-center-content t))
#+end_src

#+RESULTS:
: t

* github
** aweshell
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/github/aweshell")
  (require 'aweshell)
  (global-set-key (kbd "H-2") 'aweshell-toggle)
#+end_src

#+RESULTS:
: aweshell-toggle
** leetcode
#+begin_src emacs-lisp
  (use-package request-deferred)
  (use-package graphql)
  (add-to-list 'load-path "~/.emacs.d/github/leetcode")
  (require 'leetcode)
  (setq leetcode-account "albiny")
  (setq leetcode-password "4WRKtBjQCK87QQs")
#+end_src

#+RESULTS:
: 4WRKtBjQCK87QQs

** awesome-pair
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/github/awesome-pair")
  (require 'awesome-pair)
  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'maxima-mode-hook
                 'ielm-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'php-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'jade-mode-hook
                 'css-mode-hook
                 'ruby-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'minibuffer-inactive-mode-hook
                 ))
    (add-hook hook '(lambda () (awesome-pair-mode 1))))

  (define-key awesome-pair-mode-map (kbd "(") 'awesome-pair-open-round)
  (define-key awesome-pair-mode-map (kbd "[") 'awesome-pair-open-bracket)
  (define-key awesome-pair-mode-map (kbd "{") 'awesome-pair-open-curly)
  (define-key awesome-pair-mode-map (kbd ")") 'awesome-pair-close-round)
  (define-key awesome-pair-mode-map (kbd "]") 'awesome-pair-close-bracket)
  (define-key awesome-pair-mode-map (kbd "}") 'awesome-pair-close-curly)
  (define-key awesome-pair-mode-map (kbd "=") 'awesome-pair-equal)

  (define-key awesome-pair-mode-map (kbd "%") 'awesome-pair-match-paren)
  (define-key awesome-pair-mode-map (kbd "\"") 'awesome-pair-double-quote)

  (define-key awesome-pair-mode-map (kbd "SPC") 'awesome-pair-space)

  (define-key awesome-pair-mode-map (kbd "M-o") 'awesome-pair-backward-delete)
  (define-key awesome-pair-mode-map (kbd "C-d") 'awesome-pair-forward-delete)
  (define-key awesome-pair-mode-map (kbd "C-k") 'awesome-pair-kill)

  (define-key awesome-pair-mode-map (kbd "M-\"") 'awesome-pair-wrap-double-quote)
  (define-key awesome-pair-mode-map (kbd "M-[") 'awesome-pair-wrap-bracket)
  (define-key awesome-pair-mode-map (kbd "M-{") 'awesome-pair-wrap-curly)
  (define-key awesome-pair-mode-map (kbd "M-(") 'awesome-pair-wrap-round)
  (define-key awesome-pair-mode-map (kbd "M-)") 'awesome-pair-unwrap)

  (define-key awesome-pair-mode-map (kbd "M-p") 'awesome-pair-jump-right)
  (define-key awesome-pair-mode-map (kbd "M-n") 'awesome-pair-jump-left)
  (define-key awesome-pair-mode-map (kbd "M-:") 'awesome-pair-jump-out-pair-and-newline)
#+end_src

#+RESULTS:
: awesome-pair-jump-out-pair-and-newline

** 英文不好,找google
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/github/insert-translated-name")
  (require 'insert-translated-name)
  (global-set-key (kbd "H-1") 'insert-translated-name-replace)


  (defun comment-in-chinese()
    (interactive)
    (comment-dwim nil)
    (insert-translated-name-insert-original-translation)
    )

  (global-set-key (kbd "H-/") 'comment-in-chinese)
  (global-set-key (kbd "C-\\") 'insert-translated-name-insert-original-translation)
#+end_src

#+RESULTS:
: insert-translated-name-insert-original-translation

** ultisnips
yas用多了,换一个吧
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/github/yasnippet/")
  (add-to-list 'load-path "~/.emacs.d/github/yasnippet-snippets/")
  (require 'yasnippet-snippets)
  (require 'yasnippet)
  (yas-global-mode 1)
#+end_src


